main = fit$rotation, xlab = "Factor 1", ylab = "Factor 2")
if (length(factor_col) > 1){
text(fit$loadings[factor_col,], labels = factor_col, col = "blue")
text(fit$loadings[items[!items %in% factor_col],], labels = items[!items %in% factor_col], col = "red")
}else{
text(fit$loadings, labels = items)
}
abline(v = 0, h = 0)
plot_fit(fit_no_rotation, factor_col)
plot_fit <- function(fit, factor_col = FALSE){
plot(fit$loadings, ylim = lim, xlim = lim, type = "n",
main = fit$rotation, xlab = "Factor 1", ylab = "Factor 2")
if (length(factor_col) > 1){
text(fit$loadings[factor_col,], labels = factor_col, col = "blue")
text(fit$loadings[items[!items %in% factor_col],], labels = items[!items %in% factor_col], col = "red")
}else{
text(fit$loadings, labels = items)
}
abline(v = 0, h = 0)
}
rm(list = ls())
#change to your local path
path <- "C:/Users/JOAUR001/Dropbox/Kurs_2019/R-Script"
setwd(path)
require(lavaan)
require(semTools)
require(psych)
require(GPArotation)
options(max.print=1000000)
source("rotation_functions.R")
datapath <- "data/nsfs_agreement_sim.csv"
#datapath <- "data/nsfs_extent_sim.csv"
rdata <- read.csv(datapath)
items <- c("a1","a3","a6","c1","c3","c6")
rm(list = ls())
#change to your local path
path <- "C:/Users/JOAUR001/Dropbox/Kurs_2019/R-Script"
setwd(path)
require(haven)
require(lavaan)
require(semTools)
require(psych)
require(GPArotation)
options(max.print=1000000)
source("rotation_functions.R")
datapath <- "data/hads_data5.sav"
#datapath <- "data/nsfs_extent_sim.csv"
rdata <- read_spss(datapath)
items <- paste0("hads_",letters[seq(1,14,by = 1)])
fit_no_rotation <- fa(rdata[items], nfactors = 2, fm = "pa", rotate = "none")
fit_orthogonal <- fa(rdata[items], nfactors = 2, fm = "pa", rotate = "varimax")
fit_oblique <- fa(rdata[items], nfactors = 2, fm = "pa", rotate = "oblimin")
steps <- 20
lim <- c(-1,1)
factor_col <- paste0("hads_",letters[seq(1,14,by = 2)])
plot_fit(fit_no_rotation, factor_col)
rotate_axes(fit_orthogonal, steps, factor_col)
rotate_data(fit_orthogonal, steps, factor_col)
plot_fit(fit_orthogonal, factor_col)
plot_fit(fit_orthogonal)
rotate_axes(fit_orthogonal, steps, factor_col)
plot(fit_no_rotation)
plot(fit_no_rotation$loadings)
rotate_axes(fit_orthogonal, steps, factor_col)
rotate_data(fit_orthogonal, steps, factor_col)
plot_fit(fit_orthogonal)
rotate_axes(fit_oblique, steps, factor_col)
rotate_data(fit_oblique, steps, factor_col)
rotate_axes(fit_oblique, steps, factor_col)
rotation_matrix <- fit$rot.mat
fit <- fit_oblique
rotation_matrix <- fit$rot.mat
v1 <- get_intermediate_vectors(c(1,0), rotation_matrix[,1],steps)
v2 <- get_intermediate_vectors(c(0,1), rotation_matrix[,2],steps)
plot(fit$loadings %*% solve(fit$rot.mat), xlim = c(-1,1), ylim = c(-1,1),
main = fit$rotation, xlab = "Factor 1", ylab = "Factor 2", type = "n")
text(fit$loadings %*% solve(fit$rot.mat), labels = items)
abline(v =0, h= 0)
Sys.sleep(.1)
original_loadings <- fit$loadings %*% solve(fit$rot.mat)
for (x in 1:(steps-1)){
plot(original_loadings, xlim = c(-1,1), ylim = c(-1,1),
main = fit$rotation, xlab = "Factor 1", ylab = "Factor 2", type = "n")
if (length(factor_col) > 1){
text(original_loadings[factor_col,], labels = factor_col, col = "blue")
text(original_loadings[items[!items %in% factor_col],], labels = items[!items %in% factor_col], col = "red")
}else{
text(fit$loadings %*% solve(fit$rot.mat), labels = items)
}
r1 <- v1[[x]]
r2 <- v2[[x]]
abline(a =0, b= -r1[1]/r1[2])
abline(a =0, b= -r2[1]/r2[2])
Sys.sleep(.1)
}
rotation_matrix <- fit$rot.mat
v1 <- get_intermediate_vectors(c(1,0), rotation_matrix[,1],steps)
v2 <- get_intermediate_vectors(c(0,1), rotation_matrix[,2],steps)
plot(fit$loadings %*% solve(fit$rot.mat), xlim = c(-1,1), ylim = c(-1,1),
main = fit$rotation, xlab = "Factor 1", ylab = "Factor 2", type = "n")
text(fit$loadings %*% solve(fit$rot.mat), labels = items)
abline(v =0, h= 0)
Sys.sleep(.1)
original_loadings <- fit$loadings %*% solve(fit$rot.mat)
for (x in 1:(steps-1)){
loadmat <- matrix(c(v1[[x]],v2[[x]]),2)
new_loadings <- original_loadings %*% loadmat
plot(new_loadings, xlim = c(-1,1), ylim = c(-1,1), type = "n",
main = fit$rotation, xlab = "Factor 1", ylab = "Factor 2")
if (length(factor_col) > 1){
text(new_loadings[factor_col,] %*% solve(fit$rot.mat), labels = factor_col, col = "blue")
text(new_loadings[items[!items %in% factor_col],] %*% solve(fit$rot.mat), labels = items[!items %in% factor_col], col = "red")
}else{
text(new_loadings, labels = items)
}
abline(v =0, h= 0)
Sys.sleep(.1)
}
loadmat <- matrix(c(v1[[x]],v2[[x]]),2)
new_loadings <- original_loadings %*% loadmat
plot(new_loadings, xlim = c(-1,1), ylim = c(-1,1), type = "n",
main = fit$rotation, xlab = "Factor 1", ylab = "Factor 2")
text(new_loadings, labels = items)
text(new_loadings[factor_col,] %*% solve(fit$rot.mat), labels = factor_col, col = "blue")
for (x in 1:(steps-1)){
loadmat <- matrix(c(v1[[x]],v2[[x]]),2)
new_loadings <- original_loadings %*% loadmat
plot(new_loadings, xlim = c(-1,1), ylim = c(-1,1), type = "n",
main = fit$rotation, xlab = "Factor 1", ylab = "Factor 2")
if (length(factor_col) > 1){
text(new_loadings[factor_col,], labels = factor_col, col = "blue")
text(new_loadings[items[!items %in% factor_col],], labels = items[!items %in% factor_col], col = "red")
}else{
text(new_loadings, labels = items)
}
abline(v =0, h= 0)
Sys.sleep(.1)
}
rm(list = ls())
#change to your local path
path <- "C:/Users/JOAUR001/Dropbox/Kurs_2019/R-Script"
setwd(path)
require(lavaan)
require(semTools)
require(psych)
require(GPArotation)
options(max.print=1000000)
source("rotation_functions.R")
datapath <- "data/nsfs_agreement_sim.csv"
#datapath <- "data/nsfs_extent_sim.csv"
rdata <- read.csv(datapath)
items <- c("a1","a3","a6","c1","c3","c6")
items <- c(paste0("c", 1:6),paste0("a", 1:6))
fit_no_rotation <- fa(rdata[items], nfactors = 2, fm = "pa", rotate = "none")
fit_orthogonal <- fa(rdata[items], nfactors = 2, fm = "pa", rotate = "varimax")
fit_oblique <- fa(rdata[items], nfactors = 2, fm = "pa", rotate = "oblimin")
steps <- 20
lim <- c(-1,1)
plot_fit(fit_no_rotation)
rm(list = ls())
#change to your local path
path <- "C:/Users/JOAUR001/Dropbox/Kurs_2019/R-Script"
setwd(path)
require(haven)
require(lavaan)
require(semTools)
require(psych)
require(GPArotation)
options(max.print=1000000)
source("rotation_functions.R")
datapath <- "data/hads_data5.sav"
#datapath <- "data/nsfs_extent_sim.csv"
rdata <- read_spss(datapath)
items <- paste0("hads_",letters[seq(1,14,by = 1)])
#items <- c("a1","a3","a6","c1","c3","c6")
#items <- c(paste0("hads", 1:6),paste0("a", 1:6))
fit_no_rotation <- fa(rdata[items], nfactors = 2, fm = "pa", rotate = "none")
fit_orthogonal <- fa(rdata[items], nfactors = 2, fm = "pa", rotate = "varimax")
fit_oblique <- fa(rdata[items], nfactors = 2, fm = "pa", rotate = "oblimin")
steps <- 20
lim <- c(-1,1)
factor_col <- paste0("hads_",letters[seq(1,14,by = 2)])
plot_fit(fit_no_rotation, factor_col)
plot(fit_no_rotation$loadings)
rotate_axes(fit_orthogonal, steps, factor_col)
rotate_data(fit_orthogonal, steps, factor_col)
plot_fit(fit_orthogonal)
rotate_axes(fit_oblique, steps, factor_col)
rotate_data(fit_oblique, steps, factor_col)
plot_fit(fit_oblique)
rotate_data(fit_orthogonal, steps, factor_col)
plot_fit(fit_orthogonal)
plot_fit(fit_no_rotation)
plot_fit(fit_oblique)
rotate_axes(fit_orthogonal, steps, factor_col)
rotate_axes(fit_oblique, steps, factor_col)
rotate_data(fit_oblique, steps, factor_col)
rotate_data(fit_orthogonal, steps, factor_col)
factor_col <- items[1:3]
fit_no_rotation <- fa(rdata[items], nfactors = 2, fm = "pa", rotate = "none")
rm(list = ls())
#change to your local path
path <- "C:/Users/JOAUR001/Dropbox/Kurs_2019/R-Script"
setwd(path)
require(lavaan)
require(semTools)
require(psych)
require(GPArotation)
options(max.print=1000000)
source("rotation_functions.R")
datapath <- "data/nsfs_agreement_sim.csv"
#datapath <- "data/nsfs_extent_sim.csv"
rdata <- read.csv(datapath)
items <- c("a1","a3","a6","c1","c3","c6")
items <- c(paste0("c", 1:6),paste0("a", 1:6))
factor_col <- items[1:3]
fit_no_rotation <- fa(rdata[items], nfactors = 2, fm = "pa", rotate = "none")
fit_orthogonal <- fa(rdata[items], nfactors = 2, fm = "pa", rotate = "varimax")
fit_oblique <- fa(rdata[items], nfactors = 2, fm = "pa", rotate = "oblimin")
steps <- 20
lim <- c(-1,1)
plot_fit(fit_no_rotation, factor_col)
rotate_axes(fit_orthogonal, steps, factor_col)
rotate_data(fit_orthogonal, steps, factor_col)
plot_fit(fit_orthogonal, factor_col)
rotate_axes(fit_oblique, steps, factor_col)
rotate_data(fit_oblique, steps, factor_col)
plot_fit(fit_oblique, factor_col)
items <- c("a1","a3","a6","c1","c3","c6")
factor_col <- items[1:3]
fit_no_rotation <- fa(rdata[items], nfactors = 2, fm = "pa", rotate = "none")
fit_orthogonal <- fa(rdata[items], nfactors = 2, fm = "pa", rotate = "varimax")
fit_oblique <- fa(rdata[items], nfactors = 2, fm = "pa", rotate = "oblimin")
steps <- 20
lim <- c(-1,1)
plot_fit(fit_no_rotation, factor_col)
rotate_axes(fit_orthogonal, steps, factor_col)
rotate_data(fit_orthogonal, steps, factor_col)
plot_fit(fit_orthogonal, factor_col)
rotate_axes(fit_oblique, steps, factor_col)
rotate_data(fit_oblique, steps, factor_col)
fit_no_rotation <- fa(rdata[items], nfactors = 1, fm = "pa", rotate = "none")
plot_fit(fit_no_rotation, factor_col)
plot(fit_no_rotation$loadings)
fit_no_rotation
data(Bechtoldt)
rdata <- data(Bechtoldt)
utils::View(rdata)
Bechtoldt
View(Bechtoldt)
#items <- c("a1","a3","a6","c1","c3","c6")
#items <- c(paste0("hads", 1:6),paste0("a", 1:6))
?fa
#items <- c("a1","a3","a6","c1","c3","c6")
#items <- c(paste0("hads", 1:6),paste0("a", 1:6))
scree(Bechtoldt)
fit_no_rotation <- fa(Bechtoldt, nfactors = 2, fm = "pa", rotate = "none")
fit_orthogonal <- fa(Bechtoldt, nfactors = 2, fm = "pa", rotate = "varimax")
fit_oblique <- fa(Bechtoldt, nfactors = 2, fm = "pa", rotate = "oblimin")
rotate_axes(fit_orthogonal, steps, factor_col)
rotate_axes(fit_orthogonal, steps)
items <- colnames(Bechtoldt)
rotate_axes(fit_orthogonal, steps)
rotate_axes(fit_oblique, steps)
#items <- c("a1","a3","a6","c1","c3","c6")
#items <- c(paste0("hads", 1:6),paste0("a", 1:6))
scree(Reise)
fit_no_rotation <- fa(rise, nfactors = 2, fm = "pa", rotate = "none")
fit_no_rotation <- fa(Reise, nfactors = 2, fm = "pa", rotate = "none")
fit_no_rotation
Thurstone
data(Thurstone)
View(box20)
View(box26)
data(Thurstone)
cor(box20)
randu
cor(randu)
fa(randu,2)
scree(randu)
scree(cor(randu))
require(DAKS)
install.packages(DAKS)
install.packages("DAKS")
setwd("~/Dropbox/Kurs_2019//R-script/SIM BETTER")
require(DAKS)
pisa
?pisa
rdata <- pisa
rm(list = ls())
setwd("~/Dropbox/Kurs_2019//R-script/SIM BETTER")
source("functions.R")
require(mirt)
require(ggplot2)
install.packages("ggplot2")
install.packages("mirt")
rm(list = ls())
setwd("~/Dropbox/Kurs_2019//R-script/SIM BETTER")
source("functions.R")
require(DAKS)
require(mirt)
require(ggplot2)
#rdata <- read.csv("nsfs/nsfs_agreement_sim.csv")
rdata <- pisa
###################
#gpcmIRT estimates difficulty (location) and discrimination (slope) for each item
#grsmIRT estimates difficulty (location) and assumes the same discrimination (slope) for all items
itemtype.choice <- "gpcmIRT"
A.mod <- mirt(data = rdata, model = 1, itemtype = itemtype.choice)
M2(A.mod, type = "C2")
summary(A.mod)
itemfit(A.mod)
coef(A.mod, IRTpars =  T, simplify = T)
plot(A.mod, type = "trace")
plot(A.mod, type = 'itemscore')
plot(A.mod, type = "info")
plot(A.mod, type = "info")
rdata["autonomy_fscore"] <- fscores(A.mod)[,1]
rdata["autonomy_personfit"] <- personfit(A.mod)
rdata["autonomy_expected"] <- expected.test(A.mod, as.matrix(rdata["autonomy_fscore"]), lenght(autonomy))
rdata["autonomy_true"] <- rowSums(rdata[autonomy])
aplot
aplot <- plot(A.mod)
ggplot() +
geom_line(aes(x = aplot$panel.args[[1]]$x, y = aplot$panel.args[[1]]$y)) +
geom_point(data = rdata, aes(x = autonomy_fscore, y= autonomy_true))
plot_item_vs_expected(A.mod, rdata, autonomy, "autonomy_fscore")
rdata["autonomy_expected"] <- expected.test(A.mod, as.matrix(rdata), lenght(rdata))
rdata["autonomy_true"] <- rowSums(rdata)
aplot <- plot(A.mod)
ggplot() +
geom_line(aes(x = aplot$panel.args[[1]]$x, y = aplot$panel.args[[1]]$y)) +
geom_point(data = rdata, aes(x = autonomy_fscore, y= autonomy_true))
A.mod <- mirt(data = rdata, model = 1, itemtype = itemtype.choice)
M2(A.mod, type = "C2")
summary(A.mod)
View(rdata)
itemfit(A.mod)
coef(A.mod, IRTpars =  T, simplify = T)
plot(A.mod, type = "trace")
plot(A.mod, type = 'itemscore')
plot(A.mod, type = "info")
rdata["autonomy_fscore"] <- fscores(A.mod)[,1]
rdata["autonomy_personfit"] <- personfit(A.mod)
#rdata <- read.csv("nsfs/nsfs_agreement_sim.csv")
rdata <- pisa
###################
#gpcmIRT estimates difficulty (location) and discrimination (slope) for each item
#grsmIRT estimates difficulty (location) and assumes the same discrimination (slope) for all items
itemtype.choice <- "Rasch"
A.mod <- mirt(data = rdata, model = 1, itemtype = itemtype.choice)
M2(A.mod, type = "C2")
summary(A.mod)
itemfit(A.mod)
coef(A.mod, IRTpars =  T, simplify = T)
plot(A.mod, type = "trace")
plot(A.mod, type = 'itemscore')
plot(A.mod, type = "info")
rdata["autonomy_fscore"] <- fscores(A.mod)[,1]
rdata["autonomy_personfit"] <- personfit(A.mod)
rdata["autonomy_expected"] <- expected.test(A.mod, as.matrix(rdata), lenght(rdata))
rdata["autonomy_true"] <- rowSums(rdata)
aplot <- plot(A.mod)
ggplot() +
geom_line(aes(x = aplot$panel.args[[1]]$x, y = aplot$panel.args[[1]]$y)) +
geom_point(data = rdata, aes(x = autonomy_fscore, y= autonomy_true))
rdata["autonomy_expected"] <- expected.test(A.mod, as.matrix(rdata), lenght(rdata))
rdata["autonomy_true"] <- rowSums(rdata)
rdata["autonomy_fscore"] <- fscores(A.mod)[,1]
rdata["autonomy_personfit"] <- personfit(A.mod)
rdata["autonomy_expected"] <- expected.test(A.mod, as.matrix(rdata[1:5]), 5)
rdata["autonomy_true"] <- rowSums(rdata)
aplot <- plot(A.mod)
ggplot() +
geom_line(aes(x = aplot$panel.args[[1]]$x, y = aplot$panel.args[[1]]$y)) +
geom_point(data = rdata, aes(x = autonomy_fscore, y= autonomy_true))
#rdata <- read.csv("nsfs/nsfs_agreement_sim.csv")
rdata <- pisa
###################
#gpcmIRT estimates difficulty (location) and discrimination (slope) for each item
#grsmIRT estimates difficulty (location) and assumes the same discrimination (slope) for all items
itemtype.choice <- "Rasch"
A.mod <- mirt(data = rdata, model = 1, itemtype = itemtype.choice)
M2(A.mod, type = "C2")
summary(A.mod)
itemfit(A.mod)
coef(A.mod, IRTpars =  T, simplify = T)
plot(A.mod, type = "trace")
plot(A.mod, type = 'itemscore')
plot(A.mod, type = "info")
rdata["autonomy_fscore"] <- fscores(A.mod)[,1]
rdata["autonomy_personfit"] <- personfit(A.mod)
rdata["autonomy_expected"] <- expected.test(A.mod, as.matrix(rdata[1:5]), 5)
rdata["autonomy_true"] <- rowSums(rdata[1:5])
aplot <- plot(A.mod)
ggplot() +
geom_line(aes(x = aplot$panel.args[[1]]$x, y = aplot$panel.args[[1]]$y)) +
geom_point(data = rdata, aes(x = autonomy_fscore, y= autonomy_true))
plot_item_vs_expected(A.mod, rdata, autonomy, "autonomy_fscore")
plot_item_vs_expected(A.mod, rdata[1:5], vars = 1:5, "autonomy_fscore")
pisa
colnames(pisa)
colnames(pisa[1:5])
plot_item_vs_expected(A.mod, rdata[1:5], colnames(pisa[1:5]), "autonomy_fscore")
#rdata <- read.csv("nsfs/nsfs_agreement_sim.csv")
rdata <- pisa
###################
#gpcmIRT estimates difficulty (location) and discrimination (slope) for each item
#grsmIRT estimates difficulty (location) and assumes the same discrimination (slope) for all items
itemtype.choice <- "Rasch"
A.mod <- mirt(data = rdata, model = 1, itemtype = itemtype.choice)
M2(A.mod, type = "C2")
summary(A.mod)
itemfit(A.mod)
coef(A.mod, IRTpars =  T, simplify = T)
plot(A.mod, type = "trace")
plot(A.mod, type = 'itemscore')
plot(A.mod, type = "info")
rdata["pisa_fscore"] <- fscores(A.mod)[,1]
rdata["pisa_personfit"] <- personfit(A.mod)
rdata["pisa_expected"] <- expected.test(A.mod, as.matrix(rdata[1:5]), 5)
rdata["pisa_true"] <- rowSums(rdata[1:5])
aplot <- plot(A.mod)
ggplot() +
geom_line(aes(x = aplot$panel.args[[1]]$x, y = aplot$panel.args[[1]]$y)) +
geom_point(data = rdata, aes(x = pisa_fscore, y= pisa_true))
plot_item_vs_expected(A.mod, rdata[1:5], colnames(pisa[1:5]), "pisa_fscore")
plot_item_vs_expected(A.mod, rdata, colnames(pisa[1:5]), "pisa_fscore")
rm(list = ls())
setwd("~/Dropbox/Kurs_2019//R-script/SIM BETTER")
source("functions.R")
require(mirt)
require(ggplot2)
#rdata <- read.csv("nsfs/nsfs_agreement_sim.csv")
rdata <- read.csv("nsfs_extent_sim.csv")
reversed_items <- c("a2", "a4", "a5", "s2", "s4", "s5", "c1", "c3", "c6")
rdata[reversed_items] <- 6 - rdata[reversed_items]
###################
#gpcmIRT estimates difficulty (location) and discrimination (slope) for each item
#grsmIRT estimates difficulty (location) and assumes the same discrimination (slope) for all items
itemtype.choice <- "gpcmIRT"
##################
autonomy <- c( "a1",  "a2",  "a3",  "a4", "a5", "a6")
autonomy <- autonomy[-c(2,4,5)]
A.mod <- mirt(data = rdata[autonomy], model = 1, itemtype = itemtype.choice)
M2(A.mod, type = "C2")
summary(A.mod)
itemfit(A.mod)
coef(A.mod, IRTpars =  T, simplify = T)
plot(A.mod, type = "trace")
plot(A.mod, type = 'itemscore')
plot(A.mod, type = "info")
rdata["autonomy_fscore"] <- fscores(A.mod)[,1]
rdata["autonomy_personfit"] <- personfit(A.mod)
rdata["autonomy_expected"] <- expected.test(A.mod, as.matrix(rdata["autonomy_fscore"]), lenght(autonomy))
rdata["autonomy_true"] <- rowSums(rdata[autonomy])
aplot <- plot(A.mod)
ggplot() +
geom_line(aes(x = aplot$panel.args[[1]]$x, y = aplot$panel.args[[1]]$y)) +
geom_point(data = rdata, aes(x = autonomy_fscore, y= autonomy_true))
plot_item_vs_expected(A.mod, rdata, autonomy, "autonomy_fscore")
rm(list = ls())
setwd("~/Dropbox/Kurs_2019//R-script/SIM BETTER")
source("functions.R")
require(DAKS)
require(mirt)
require(ggplot2)
#rdata <- read.csv("nsfs/nsfs_agreement_sim.csv")
rdata <- pisa
#reversed_items <- c("a2", "a4", "a5", "s2", "s4", "s5", "c1", "c3", "c6")
#rdata[reversed_items] <- 6 - rdata[reversed_items]
###################
#gpcmIRT estimates difficulty (location) and discrimination (slope) for each item
#grsmIRT estimates difficulty (location) and assumes the same discrimination (slope) for all items
itemtype.choice <- "Rasch"
##################
A.mod <- mirt(data = rdata, model = 1, itemtype = itemtype.choice)
M2(A.mod, type = "C2")
summary(A.mod)
itemfit(A.mod)
coef(A.mod, IRTpars =  T, simplify = T)
plot(A.mod, type = "trace")
plot(A.mod, type = 'itemscore')
plot(A.mod, type = "info")
rdata["pisa_fscore"] <- fscores(A.mod)[,1]
rdata["pisa_personfit"] <- personfit(A.mod)
rdata["pisa_fscore"] <- fscores(A.mod)[,1]
rdata["pisa_personfit"] <- personfit(A.mod)
personfit(A.mod)
rdata["pisa_expected"] <- expected.test(A.mod, as.matrix(rdata[1:5]), 5)
rdata["pisa_true"] <- rowSums(rdata[1:5])
summary(rdata["pisa_true"])
aplot <- plot(A.mod)
ggplot() +
geom_line(aes(x = aplot$panel.args[[1]]$x, y = aplot$panel.args[[1]]$y)) +
geom_point(data = rdata, aes(x = pisa_fscore, y= pisa_true))
plot_item_vs_expected(C.mod, rdata, competence, "competence_fscore")
plot_item_vs_expected(A.mod, rdata, colnames(pisa[1:5]), "pisa_fscore")
summary(rdata$pisa_fscore)
plot_item_vs_expected(A.mod, rdata, 1:5, "pisa_fscore")
rdata["pisa_fscore"] <- fscores(A.mod)[,1]
rdata["pisa_personfit"] <- personfit(A.mod)
rdata["pisa_expected"] <- expected.test(A.mod, as.matrix(rdata[1:5]), 5)
rdata["pisa_true"] <- rowSums(rdata[1:5])
aplot <- plot(A.mod)
ggplot() +
geom_line(aes(x = aplot$panel.args[[1]]$x, y = aplot$panel.args[[1]]$y)) +
geom_point(data = rdata, aes(x = pisa_fscore, y= pisa_true))
M2(A.mod, type = "C2")
summary(A.mod)
itemfit(A.mod)
coef(A.mod, IRTpars =  T, simplify = T)
